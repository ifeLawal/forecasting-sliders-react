{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["module","exports","RoutePage","basename","path","exact","component","ForecastDashBoard","React","Component","className","name","BlockInputs","props","state","dataVal","incVal","handleUpdateDataInput","bind","handleUpdateIncInput","val","this","setState","dataInputUpdate","sliderStep","textVal","incInputUpdate","TextAndSliderInput","min","max","updateSliderAndTextInput","e","target","value","updateMinAndMax","type","onChange","step","TextInput","updateTextInput","ToggleSwitch","checked","toggleOnAndOff","console","log","ResultBlock","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e64bb7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './switch.css';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect, } from 'react-router-dom';\n\n\nclass RoutePage extends React.Component {\n\n  render() {\n    return (\n      <Router basename=\"/forecasting-sliders-react\">\n        <Switch>\n          <Route path=\"/\" exact component={ForecastDashBoard}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\n// manages all the data and states in inputs and sliders\n// uses that data to calculate the data for the result block\n// TBD - if it passes revenue, orders, AOV, and cost values as props to BlockInputs\nclass ForecastDashBoard extends React.Component {\n  \n  render() {\n    return (\n      <div>\n        <h1>Forecast</h1>\n        <fieldset>\n          \n          <div className=\"flex-padding\">\n            <BlockInputs name={\"Revenue\"}/>\n            <BlockInputs name={\"Orders\"}/>\n            <BlockInputs name={\"AOV\"}/>\n            \n          </div>\n          <div className=\"flex-padding\">\n            <BlockInputs \n              name={\"Cost\"}/>\n          </div>\n\n          <ResultBlock \n            name={\"Return on Ad Spend\"}\n          />\n        </fieldset>\n      </div>\n    );\n  }\n\n}\n\n\n// holds user input for updating metric values in slider ant text \n// also updates incrementer for the slider steps of the metric\n// TBD - if it loads values from a parent component allowing the parent to\n// calculate values\n// how to manage switch freezing calculated values\nclass BlockInputs extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      dataVal: 100,\n      incVal: 10\n    }\n\n    this.handleUpdateDataInput = this.handleUpdateDataInput.bind(this);\n    this.handleUpdateIncInput = this.handleUpdateIncInput.bind(this);\n  }\n\n  handleUpdateDataInput(val) {\n    this.setState({\n      dataVal: val\n    })\n  }\n\n  handleUpdateIncInput(val) {\n    this.setState({\n      incVal: val,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"box-border data\">\n        <div>\n          <label><strong>{this.props.name}</strong></label>\n          <TextAndSliderInput       // \n            dataInputUpdate={this.handleUpdateDataInput}\n            val={this.state.dataVal}\n            sliderStep={this.state.incVal}\n             />\n          <ToggleSwitch />\n        </div>\n        <div>\n          <label>Increment by</label>\n          <TextInput \n            textVal={this.state.incVal}\n            incInputUpdate={this.handleUpdateIncInput}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// manages the text and slider input UI\n// parent sends down updated values based on UI interactions\nclass TextAndSliderInput extends React.Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      min: 0,\n      max: 1000\n    }\n\n    this.updateSliderAndTextInput = this.updateSliderAndTextInput.bind(this);\n  }\n\n  updateSliderAndTextInput(e) {\n    this.props.dataInputUpdate(e.target.value);\n    this.updateMinAndMax(e.target.value);\n  }\n\n  updateMinAndMax(val) {\n    if(val < this.state.min) {\n      this.setState({\n        min: val\n      });\n    } else if (val > this.state.max) {\n      this.setState({\n        max: val\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" \n          value={this.props.val} \n          onChange={this.updateSliderAndTextInput}\n        />\n        <input type=\"range\" \n          value={this.props.val} \n          step={this.props.sliderStep} \n          onChange={this.updateSliderAndTextInput}\n          min={this.state.min}\n          max={this.state.max}\n        />\n      </div>\n    )\n  }\n}\n\n// purely meant to set text and slider input increment value\nclass TextInput extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.updateTextInput = this.updateTextInput.bind(this);\n  }\n\n  updateTextInput(e) {\n    this.props.incInputUpdate(e.target.value)\n  }\n\n  render() {\n    return(\n      <div>\n        <input type=\"text\" \n          value={this.props.textVal} \n          onChange={this.updateTextInput}/>\n      </div>\n    )\n  }\n}\n\n// freezes or unfreezes metrics to allow user control of what values\n// they want to stay the same while changing a calculated value\nclass ToggleSwitch extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checked: true,\n    }\n\n    this.toggleOnAndOff = this.toggleOnAndOff.bind(this);\n  }\n\n  toggleOnAndOff(e) {\n    console.log(this.state.checked)\n    this.setState({\n      checked: !this.state.checked\n    })\n  }\n\n  render() {\n    return (\n      <label className=\"switch\">\n        <input type=\"checkbox\" checked={this.state.checked} onChange={this.toggleOnAndOff} />\n        <span className=\"slider round\"></span>\n      </label>\n    )\n  }\n}\n\n// display the total calculated metric\n// in this case it will be purely for return on ad spend\nclass ResultBlock extends React.Component {\n  render() {\n    return (\n      <div className=\"box-border data\">\n        <div><strong>{this.props.name}</strong></div>\n        <input type=\"text\" value={this.props.val}/>\n      </div>\n    )\n  }\n}\n\n\nexport default RoutePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './base.css';\nimport App from './App';\nimport RoutePage from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RoutePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}